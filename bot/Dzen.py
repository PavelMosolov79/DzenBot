import aiohttp
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from pyppeteer import launch

import requests
import random
import time

import os

LISTEN_URL = ''
TOKEN = ''
ACCESS_TOKEN = ''
GROUP_ID = ''

def load_config(file_path):
    config = {}
    with open(file_path, 'r') as file:
        for line in file:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–∫ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            key, value = line.strip().split(' = ')
            # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –∫–∞–≤—ã—á–µ–∫ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            value = value.strip("'")
            config[key] = value
    return config



config = {}

file_path = 'config.txt'
config = load_config(file_path)

LISTEN_URL = config['LISTEN_URL']
TOKEN = config['TOKEN']
ACCESS_TOKEN = config['ACCESS_TOKEN']
GROUP_ID = config['GROUP_ID']


stop_event = asyncio.Event()
stop_event.set()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)




import vk_api


def vk_posting(allText, image_url):
  POST_TEXT = allText

  vk_session = vk_api.VkApi(token=ACCESS_TOKEN)
  vk = vk_session.get_api()

  attachments = []

  if image_url:
    try:
      response = requests.get(image_url)
      if response.status_code == 200:
        photo_data = response.content

        upload_url = vk.photos.getWallUploadServer(
          group_id=GROUP_ID)['upload_url']

        files = {'photo': ('photo.jpg', photo_data, 'image/jpeg')}
        response = requests.post(upload_url, files=files)
        json_data = response.json()

        if 'server' in json_data and 'photo' in json_data and 'hash' in json_data:
          photo_data = vk.photos.saveWallPhoto(group_id=GROUP_ID,
                                               server=json_data['server'],
                                               photo=json_data['photo'],
                                               hash=json_data['hash'])
          photo_link = f"photo{photo_data[0]['owner_id']}_{photo_data[0]['id']}"
          attachments.append(photo_link)
        else:
          print("Error uploading image to VK: ", json_data)

      else:
        print("Error downloading image: ", response.status_code)

    except Exception as e:
      print("Error while processing image: ", e)

  if attachments:
    vk.wall.post(owner_id='-' + GROUP_ID,
                 message=POST_TEXT,
                 attachments=",".join(attachments))
  else:
    vk.wall.post(owner_id='-' + GROUP_ID, message=POST_TEXT)

  print('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.')


def text_bold_h1(allText, h1_element):
  allText += h1_element[0]
  allText += "\n\n"

  return allText


def text_bold_p(allText, p_element):
  smile = ["‚ùóÔ∏è", "üìå", "üî•", "‚öôÔ∏è", "üìç", ""]
  saveText = ""

  for i in range(len(p_element)):
    if len(p_element[i]) <= 10:
      continue
    else:
      if len(allText + p_element[i]) <= 4000:
        smileRand = random.randint(0, 5)
        allText += smile[smileRand]
        allText += p_element[i]
        allText += smile[smileRand]
        allText += "\n\n"
      else:
        smileRand = random.randint(0, 5)
        saveText += smile[smileRand]
        saveText += p_element[i]
        saveText += smile[smileRand]
        saveText += "\n\n"

  return allText, saveText


async def get_content(url):
  browser = await launch()
  page = await browser.newPage()
  await page.goto(url)

  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ h1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  await page.waitForSelector("h1")

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ h1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  h1_elements = await page.querySelectorAll("h1")

  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ h1
  h1_contents = []
  for h1_element in h1_elements:
    h1_content = await page.evaluate('(element) => element.textContent',
                                     h1_element)
    h1_contents.append(h1_content.strip())

  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ p –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  await page.waitForSelector("p")

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ p –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  p_elements = await page.querySelectorAll("p")

  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ p
  p_contents = []
  for p_element in p_elements:
    p_content = await page.evaluate('(element) => element.textContent',
                                    p_element)
    p_contents.append(p_content.strip())

  # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
  image_element = await page.querySelector("img")
  if image_element:
    image_url = await page.evaluate('(element) => element.src', image_element)

  await browser.close()
  return h1_contents, p_contents, image_url


def trim_urls(urls):
  trimmed_urls = []
  for url in urls:
    trimmed_url = url.split("?")[0]
    trimmed_urls.append(trimmed_url)
  return trimmed_urls


def remove_duplicates_from_list(input_list):
  return list(set(input_list))


async def get_href(url):
  try:
    print("–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞")
    browser = await launch()
    print("–±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
    page = await browser.newPage()
    print("—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    await page.goto(url)
    print("–ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ url")
    await page.waitForXPath(
      "//a[contains(@class, 'card-image-compact-view__clickable')]",
      timeout=30000)
    print("–∂–¥–µ–º 50 —Å–µ–∫—É–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤")
    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Å—ã–ª–∫–∏
    while True:
      last_height = await page.evaluate("document.body.scrollHeight")
      await page.evaluate("window.scrollTo(0, document.body.scrollHeight)")

      # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (1 —Å–µ–∫—É–Ω–¥–∞)
      await asyncio.sleep(5)

      new_height = await page.evaluate("document.body.scrollHeight")
      if new_height == last_height:
        break  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a —Å –∫–ª–∞—Å—Å–æ–º 'card-image-compact-view__clickable' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    article_links_elements = await page.xpath(
      "//a[contains(@class, 'card-image-compact-view__clickable')]")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
    article_links = [
      await page.evaluate('(element) => element.href', el)
      for el in article_links_elements
    ]

    article_links = trim_urls(article_links)

    article_links = remove_duplicates_from_list(article_links)

    await browser.close()
    return article_links
  except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    return None


async def get_image_url(url):
  browser = await launch()
  page = await browser.newPage()
  await page.goto(url)

  # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
  image_element = await page.querySelector("img")
  if image_element:
    image_url = await page.evaluate('(element) => element.src', image_element)
    await browser.close()
    return image_url
  else:
    await browser.close()
    return None


async def href_process_url(user_url):
  try:
    async with aiohttp.ClientSession() as session:
      async with session.get(user_url) as response:
        if response.status == 200:
          print("connect 200")
          href_contents = await get_href(user_url)
          return href_contents
        else:
          print("connect 400")
          return None
  except Exception as e:
    return None


async def process_url(user_url):
  try:
    async with aiohttp.ClientSession() as session:
      async with session.get(user_url) as response:
        if response.status == 200:
          print("connect 200")
          h1_contents, p_contents, image_url = await get_content(user_url)

          allText = ""
          saveText = ""
          allText = text_bold_h1(allText, h1_contents)
          allText, saveText = text_bold_p(allText, p_contents)
          return allText, saveText, image_url
        else:
          print("connect 400")
          return None, None, None
  except Exception as e:
    return None, None, None


async def periodic_job(listenUrl, message):
  print("sss", listenUrl, "\n")
  while True:
    await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –≤ (30 —Å–µ–∫—É–Ω–¥)
    urls = await href_process_url(listenUrl)

    if urls:
      with open("bd.txt", "r") as file:
        print("–æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª")
        urlsFile = file.readlines()

      existing_urls = {url.strip() for url in urlsFile}

      new_urls = [link for link in urls if link not in existing_urls]
      print(new_urls)
      if new_urls != []:
        with open("bd.txt", "a") as file:
          for link in new_urls:
            file.write(link + "\n")
        print("–°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö bd.txt")
        for url in new_urls:
          print("url –ø–æ–ª—É—á–µ–Ω")
          allText, saveText, image_url = await process_url(url)
          print("–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω")
          if allText:
            await message.reply(f"{allText}")
          if saveText:
            await message.reply(f"{saveText}")

          if image_url:
            await message.reply_photo(image_url)
          else:
            await message.reply("–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
          if allText and image_url:
            vk_posting(allText + saveText, image_url)
          await asyncio.sleep(5)
      else:
        print("–ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç")

        #–ó–¥–µ—Å—å –Ω–∞–¥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π.

    else:
      print("–ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç")

    if stop_event.is_set():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
      break



@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
  global LISTEN_URL
  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
  keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
  keyboard.add(types.KeyboardButton("/start"))
  keyboard.add(types.KeyboardButton("/ChekAPI"))
  keyboard.add(types.KeyboardButton("/–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"))
  keyboard.add(types.KeyboardButton("/–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"))
  keyboard.add(types.KeyboardButton("/help"))
  keyboard.add(types.KeyboardButton("/–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö URl"))


  await message.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def handle_start(message: types.Message):
  await message.reply(""" 
  /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n
/ChekAPI - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞\n
–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —è–Ω–¥–µ–∫—Å –¥–∑–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã!\n
–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —è–Ω–¥–µ–∫—Å –¥–∑–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã!\n
–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ Windows - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫\n
–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö URl - –£–¥–∞–ª–∞—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–ª–æ–≥–µ, –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ" –±–æ—Ç —Å–Ω–æ–≤–∞ –≤—ã–ª–æ–∂–∏—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏. –°–û–•–†–ê–ù–ò–¢–ï –ö–û–ü–ò–Æ –§–ê–ô–õ–ê –ü–ï–†–ï–î –£–î–ê–õ–ï–ù–ò–ï–ú –í –î–†–£–ì–û–ï –ú–ï–°–¢–û. –û–°–¢–û–†–û–ñ–ù–û! –î–ê–ù–ù–û–ï –î–ï–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–ë–†–ê–¢–ò–¢–¨!""")


@dp.message_handler(commands=['newVkApiKey'])
async def handle_start(message: types.Message):
  await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π VK API –∫–ª—é—á:")


@dp.message_handler(commands=['newVkGroupKey'])
async def handle_start(message: types.Message):
  await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π VK id –≥—Ä—É–ø–ø—ã:")


@dp.message_handler(commands=['newDzenUrl'])
async def handle_start(message: types.Message):
  await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å—Å –±–ª–æ–≥–∞:")


@dp.message_handler(commands=['ChekAPI'])
async def handle_start(message: types.Message):
  await message.reply(f"VK API: {ACCESS_TOKEN}\nVK GROUP ID: {GROUP_ID}")


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
  global ACCESS_TOKEN, GROUP_ID, LISTEN_URL

  global stop_event
  if not stop_event.is_set():
    await message.reply("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–¥–µ—Ç!")

  user_url = message.text

  if 'https://dzen.ru' in user_url:
    print("url –ø–æ–ª—É—á–µ–Ω")
    if ACCESS_TOKEN == "":
      print("url –ø–æ–ª—É—á–µ–Ω")
      await message.reply(
        "VK API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n–ö–æ–º–º–∞–Ω–¥–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ - /newVkApiKey")
    elif GROUP_ID == "":
      await message.reply(
        "id –≥—Ä—É–ø–ø—ã VK –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n–ö–æ–º–º–∞–Ω–¥–∞ –¥–ª—è –≤–≤–æ–¥–∞ id - /newVkGroupKey")
    else:
      LISTEN_URL = user_url
  elif '–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ' in user_url:
    stop_event.clear()
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_job(LISTEN_URL, message))
  elif '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ' in user_url:
    stop_event.set()
    await message.reply("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
  elif '–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö URl' in user_url:
    file_path = 'bd.txt'
    with open(file_path, 'w') as file:
      pass
    await message.reply("–ë–∞–∑–∞ URL –∞–¥—Ä–µ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞")
  elif 'vk' in user_url:
    ACCESS_TOKEN = user_url
    await message.reply(f"{ACCESS_TOKEN}")
  elif len(user_url) < 10 and len(user_url) > 0:
    GROUP_ID = user_url
    await message.reply(f"{GROUP_ID}")
  else:
    await message.reply("–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω—è–ª, –≤–≤–µ–¥–∏ /start")


if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=True)
